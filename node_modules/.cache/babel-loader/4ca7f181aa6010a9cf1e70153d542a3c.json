{"ast":null,"code":"var _jsxFileName = \"/Users/ciankeeney/Downloads/CoronaVirusTracker-main/src/components/Chart/Chart.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { Line, Bar } from 'react-chartjs-2';\nimport { fetchDailyData } from '../../api';\nimport styles from './Chart.module.css';\nconst Chart = _ref => {\n  let {\n    data: {\n      confirmed,\n      recovered,\n      deaths\n    },\n    country\n  } = _ref;\n  const [dailyData, setDailyData] = useState({});\n  useEffect(() => {\n    const fetchMyAPI = async () => {\n      const initialDailyData = await fetchDailyData();\n      setDailyData(initialDailyData);\n    };\n    fetchMyAPI();\n  }, []);\n  const barChart = confirmed ? /*#__PURE__*/React.createElement(Bar, {\n    data: {\n      labels: ['Infected', 'Recovered', 'Deaths'],\n      datasets: [{\n        label: 'People',\n        backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\n        data: [confirmed.value, recovered.value, deaths.value]\n      }]\n    },\n    options: {\n      legend: {\n        display: false\n      },\n      title: {\n        display: true,\n        text: `Current state in ${country}`\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }) : null;\n  const lineChart = dailyData[0] ? /*#__PURE__*/React.createElement(Line, {\n    data: {\n      labels: dailyData.map(_ref2 => {\n        let {\n          date\n        } = _ref2;\n        return new Date(date).toLocaleDateString();\n      }),\n      datasets: [{\n        data: dailyData.map(data => data.confirmed),\n        label: 'Infected',\n        borderColor: '#3333ff',\n        fill: true\n      }, {\n        data: dailyData.map(data => data.deaths),\n        label: 'Deaths',\n        borderColor: 'red',\n        backgroundColor: 'rgba(255, 0, 0, 0.5)',\n        fill: true\n      }, {\n        data: dailyData.map(data => data.recovered),\n        label: 'Recovered',\n        borderColor: 'green',\n        backgroundColor: 'rgba(0, 255, 0, 0.5)',\n        fill: true\n      }]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }) : null;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, country ? barChart : lineChart);\n};\nexport default Chart;","map":{"version":3,"names":["React","useState","useEffect","Line","Bar","fetchDailyData","styles","Chart","data","confirmed","recovered","deaths","country","dailyData","setDailyData","fetchMyAPI","initialDailyData","barChart","labels","datasets","label","backgroundColor","value","legend","display","title","text","lineChart","map","date","Date","toLocaleDateString","borderColor","fill","container"],"sources":["/Users/ciankeeney/Downloads/CoronaVirusTracker-main/src/components/Chart/Chart.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Line, Bar } from 'react-chartjs-2';\n\nimport { fetchDailyData } from '../../api';\n\nimport styles from './Chart.module.css';\n\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\n  const [dailyData, setDailyData] = useState({});\n\n  useEffect(() => {\n    const fetchMyAPI = async () => {\n      const initialDailyData = await fetchDailyData();\n\n      setDailyData(initialDailyData);\n    };\n\n    fetchMyAPI();\n  }, []);\n\n  const barChart = (\n    confirmed ? (\n      <Bar\n        data={{\n          labels: ['Infected', 'Recovered', 'Deaths'],\n          datasets: [\n            {\n              label: 'People',\n              backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\n              data: [confirmed.value, recovered.value, deaths.value],\n            },\n          ],\n        }}\n        options={{\n          legend: { display: false },\n          title: { display: true, text: `Current state in ${country}` },\n        }}\n      />\n    ) : null\n  );\n\n  const lineChart = (\n    dailyData[0] ? (\n      <Line\n        data={{\n          labels: dailyData.map(({ date }) => new Date(date).toLocaleDateString()),\n          datasets: [{\n            data: dailyData.map((data) => data.confirmed),\n            label: 'Infected',\n            borderColor: '#3333ff',\n            fill: true,\n          }, {\n            data: dailyData.map((data) => data.deaths),\n            label: 'Deaths',\n            borderColor: 'red',\n            backgroundColor: 'rgba(255, 0, 0, 0.5)',\n            fill: true,\n          },  {\n            data: dailyData.map((data) => data.recovered),\n            label: 'Recovered',\n            borderColor: 'green',\n            backgroundColor: 'rgba(0, 255, 0, 0.5)',\n            fill: true,\n          },\n          ],\n        }}\n      />\n    ) : null\n  );\n\n  return (\n    <div className={styles.container}>\n      {country ? barChart : lineChart}\n    </div>\n  );\n};\n\nexport default Chart;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,IAAI,EAAEC,GAAG,QAAQ,iBAAiB;AAE3C,SAASC,cAAc,QAAQ,WAAW;AAE1C,OAAOC,MAAM,MAAM,oBAAoB;AAEvC,MAAMC,KAAK,GAAG,QAAyD;EAAA,IAAxD;IAAEC,IAAI,EAAE;MAAEC,SAAS;MAAEC,SAAS;MAAEC;IAAO,CAAC;IAAEC;EAAQ,CAAC;EAChE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACd,MAAMa,UAAU,GAAG,YAAY;MAC7B,MAAMC,gBAAgB,GAAG,MAAMX,cAAc,EAAE;MAE/CS,YAAY,CAACE,gBAAgB,CAAC;IAChC,CAAC;IAEDD,UAAU,EAAE;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,QAAQ,GACZR,SAAS,gBACP,oBAAC,GAAG;IACF,IAAI,EAAE;MACJS,MAAM,EAAE,CAAC,UAAU,EAAE,WAAW,EAAE,QAAQ,CAAC;MAC3CC,QAAQ,EAAE,CACR;QACEC,KAAK,EAAE,QAAQ;QACfC,eAAe,EAAE,CAAC,sBAAsB,EAAE,sBAAsB,EAAE,sBAAsB,CAAC;QACzFb,IAAI,EAAE,CAACC,SAAS,CAACa,KAAK,EAAEZ,SAAS,CAACY,KAAK,EAAEX,MAAM,CAACW,KAAK;MACvD,CAAC;IAEL,CAAE;IACF,OAAO,EAAE;MACPC,MAAM,EAAE;QAAEC,OAAO,EAAE;MAAM,CAAC;MAC1BC,KAAK,EAAE;QAAED,OAAO,EAAE,IAAI;QAAEE,IAAI,EAAG,oBAAmBd,OAAQ;MAAE;IAC9D,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EACF,GACA,IACL;EAED,MAAMe,SAAS,GACbd,SAAS,CAAC,CAAC,CAAC,gBACV,oBAAC,IAAI;IACH,IAAI,EAAE;MACJK,MAAM,EAAEL,SAAS,CAACe,GAAG,CAAC;QAAA,IAAC;UAAEC;QAAK,CAAC;QAAA,OAAK,IAAIC,IAAI,CAACD,IAAI,CAAC,CAACE,kBAAkB,EAAE;MAAA,EAAC;MACxEZ,QAAQ,EAAE,CAAC;QACTX,IAAI,EAAEK,SAAS,CAACe,GAAG,CAAEpB,IAAI,IAAKA,IAAI,CAACC,SAAS,CAAC;QAC7CW,KAAK,EAAE,UAAU;QACjBY,WAAW,EAAE,SAAS;QACtBC,IAAI,EAAE;MACR,CAAC,EAAE;QACDzB,IAAI,EAAEK,SAAS,CAACe,GAAG,CAAEpB,IAAI,IAAKA,IAAI,CAACG,MAAM,CAAC;QAC1CS,KAAK,EAAE,QAAQ;QACfY,WAAW,EAAE,KAAK;QAClBX,eAAe,EAAE,sBAAsB;QACvCY,IAAI,EAAE;MACR,CAAC,EAAG;QACFzB,IAAI,EAAEK,SAAS,CAACe,GAAG,CAAEpB,IAAI,IAAKA,IAAI,CAACE,SAAS,CAAC;QAC7CU,KAAK,EAAE,WAAW;QAClBY,WAAW,EAAE,OAAO;QACpBX,eAAe,EAAE,sBAAsB;QACvCY,IAAI,EAAE;MACR,CAAC;IAEH,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EACF,GACA,IACL;EAED,oBACE;IAAK,SAAS,EAAE3B,MAAM,CAAC4B,SAAU;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAC9BtB,OAAO,GAAGK,QAAQ,GAAGU,SAAS,CAC3B;AAEV,CAAC;AAED,eAAepB,KAAK"},"metadata":{},"sourceType":"module"}